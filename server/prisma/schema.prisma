// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 
// ╰─ docker-compose exec app npx prisma migrate reset --force                                                                                                                                                                           ─╯

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_DB_URI")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
}

enum MessageStatus {
  READ
  UNREAD
  DELETED
}

enum NotificationStatus {
  SEEN
  UNSEEN
}

enum CollaborationStatus {
  ACTIVE
  INACTIVE
}

enum CompletionStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}

// Tables
model User {
  id           Int              @id @default(autoincrement())
  name         String
  lastname     String
  email        String           @unique
  password     String
  status       UserStatus       @default(ACTIVE)
  company_name String
  role_id      Int
  role         Role             @relation(fields: [role_id], references: [id])
  created_at   DateTime         @default(now())
  progress     Progress[]
  messagesSent Message[]        @relation("MessageSender")
  messagesReceived Message[]    @relation("MessageReceiver")
  notifications Notification[]
  collaborationsAsCollaborator Collaboration[] @relation("Collaborator")
  collaborationsAsTutor Collaboration[] @relation("Tutor")
  coursesAsTutor Course[]       @relation("CourseTutor")

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]

  @@map("roles")
}

model Course {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  status      CourseStatus  @default(ACTIVE)
  tutor_id    Int
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  tutor       User          @relation("CourseTutor", fields: [tutor_id], references: [id])
  modules     Module[]
  progress    Progress[]

  @@map("courses")
}

model Module {
  id           Int     @id @default(autoincrement())
  course_id    Int
  title        String
  content_type String
  content_id   Int
  order        Int
  course       Course  @relation(fields: [course_id], references: [id])
  progress     Progress[]

  @@map("modules")
}

model Message {
  id           Int           @id @default(autoincrement())
  sender_id    Int
  receiver_id  Int
  content      String
  timestamp    DateTime      @default(now())
  status       MessageStatus @default(UNREAD)
  sender       User          @relation("MessageSender", fields: [sender_id], references: [id])
  receiver     User          @relation("MessageReceiver", fields: [receiver_id], references: [id])

  @@map("messages")
}

model Notification {
  id         Int                @id @default(autoincrement())
  user_id    Int
  content    String
  timestamp  DateTime           @default(now())
  status     NotificationStatus @default(UNSEEN)
  type       String
  user       User               @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

model Collaboration {
  id              Int                 @id @default(autoincrement())
  collaborator_id Int
  tutor_id        Int
  created_at      DateTime            @default(now())
  status          CollaborationStatus @default(ACTIVE)
  collaborator    User                @relation("Collaborator", fields: [collaborator_id], references: [id])
  tutor           User                @relation("Tutor", fields: [tutor_id], references: [id])

  @@map("collaborations")
}

model Progress {
  id                 Int              @id @default(autoincrement())
  user_id            Int
  course_id          Int
  module_id          Int
  completion_status  CompletionStatus
  last_accessed_at   DateTime
  user               User             @relation(fields: [user_id], references: [id])
  course             Course           @relation(fields: [course_id], references: [id])
  module             Module           @relation(fields: [module_id], references: [id])

  @@map("progress")
}
