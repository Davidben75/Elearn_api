// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 
// ╰─ docker-compose exec app npx prisma migrate reset --force                                                                                                                                                                           ─╯

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_DB_URI")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
}

enum MessageStatus {
  READ
  UNREAD
  DELETED
}

enum NotificationStatus {
  SEEN
  UNSEEN
}

enum CollaborationStatus {
  ACTIVE
  INACTIVE
}

enum CompletionStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}

// Models
model User {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(100)
  lastname        String        @db.VarChar(100)
  email           String        @unique @db.VarChar(255)
  password        String        @db.VarChar(255)
  status          UserStatus
  company_name    String        @db.VarChar(255)
  role_id         Int
  created_at      DateTime      @default(now())
  role            Role          @relation(fields: [role_id], references: [id])
  progress        Progress[]
  messagesSent    Message[]     @relation("MessageSender")
  messagesReceived Message[]    @relation("MessageReceiver")
  notifications   Notification[]
  coursesAsTutor  Course[]
  collaborationsAsLearner Collaboration[] @relation("LearnerCollaboration")
  collaborationsAsTutor Collaboration[]   @relation("TutorCollaboration")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(50)
  users User[]
}

model Course {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String
  status      CourseStatus
  tutor_id    Int
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  tutor       User          @relation(fields: [tutor_id], references: [id])
  modules     Module[]
  progress    Progress[]
}

model Module {
  id           Int     @id @default(autoincrement())
  course_id    Int
  title        String  @db.VarChar(255)
  content_type String  @db.VarChar(50)
  content_id   Int
  order        Int
  course       Course  @relation(fields: [course_id], references: [id])
  progress     Progress[]
  videoContent VideoContent?
  pdfContent   PDFContent?
  textContent  TextContent?
}

model VideoContent {
  id       Int    @id @default(autoincrement())
  url      String @db.VarChar(255)
  duration Int
  module   Module @relation(fields: [id], references: [id])
}

model PDFContent {
  id         Int    @id @default(autoincrement())
  file_path  String @db.VarChar(255)
  page_count Int
  module     Module @relation(fields: [id], references: [id])
}

model TextContent {
  id      Int    @id @default(autoincrement())
  content String
  module  Module @relation(fields: [id], references: [id])
}

model Message {
  id           Int           @id @default(autoincrement())
  sender_id    Int
  receiver_id  Int
  content      String
  timestamp    DateTime      @default(now())
  status       MessageStatus
  sender       User          @relation("MessageSender", fields: [sender_id], references: [id])
  receiver     User          @relation("MessageReceiver", fields: [receiver_id], references: [id])
}

model Notification {
  id         Int                @id @default(autoincrement())
  user_id    Int
  content    String
  timestamp  DateTime           @default(now())
  status     NotificationStatus
  type       String             @db.VarChar(50)
  user       User               @relation(fields: [user_id], references: [id])
}

model Collaboration {
  id           Int                 @id @default(autoincrement())
  learner_id   Int
  tutor_id     Int
  created_at   DateTime            @default(now())
  status       CollaborationStatus
  learner      User                @relation("LearnerCollaboration", fields: [learner_id], references: [id])
  tutor        User                @relation("TutorCollaboration", fields: [tutor_id], references: [id])
}

model Progress {
  id                 Int              @id @default(autoincrement())
  user_id            Int
  course_id          Int
  module_id          Int
  completion_status  CompletionStatus
  last_accessed_at   DateTime
  user               User             @relation(fields: [user_id], references: [id])
  course             Course           @relation(fields: [course_id], references: [id])
  module             Module           @relation(fields: [module_id], references: [id])
}
