// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 
// ╰─ docker-compose exec app npx prisma migrate reset --force                                                                                                                                                                           ─╯

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_DB_URI")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
}

enum ContentType {
  VIDEO
  PDF 
  WEBLINK
}

enum MessageStatus {
  READ
  UNREAD
  DELETED
}

enum NotificationStatus {
  SEEN
  UNSEEN
}

enum CollaborationStatus {
  ACTIVE
  INACTIVE
}

enum CompletionStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}

enum EnrollmentStatus {
  ACTIVE
  DROPPED
}

// Models
model User {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(100)
  lastName        String        @db.VarChar(100) @map("last_name")
  email           String        @unique @db.VarChar(255)
  password        String        @db.VarChar(255)
  status          UserStatus
  companyName    String        @db.VarChar(255) @map("company_name")
  roleId         Int          @map("role_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  role            Role          @relation(fields: [roleId], references: [id])
  progress        Progress[]
  messagesSent    Message[]     @relation("MessageSender")
  messagesReceived Message[]    @relation("MessageReceiver")
  notifications   Notification[]
  coursesAsTutor  Course[]
  enrollmentsAsLearner Enrollment[] @relation("LeanerEnrollment")
  enrollmentsAsTutor Enrollment[] @relation("TutorEnrollment")
  collaborationsAsLearner Collaboration[] @relation("LearnerCollaboration")
  collaborationsAsTutor Collaboration[]   @relation("TutorCollaboration")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(50)
  users User[]
}

model Course {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String
  status      CourseStatus
  tutorId    Int           @map("tutor_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  tutor       User          @relation(fields: [tutorId], references: [id] , onDelete: Cascade)
  modules     Module[]
  progress    Progress[]
  enrollments Enrollment[] 
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  learnerId    Int      @map("user_id")
  courseId  Int      @map("course_id")
  tutorId   Int      @map("tutor_id")
  enrolledAt DateTime @default(now()) @map("enrolled_at")
  status    EnrollmentStatus @default(ACTIVE)
  
  user      User     @relation("LeanerEnrollment",fields: [learnerId], references: [id], onDelete: Cascade)
  tutor     User     @relation("TutorEnrollment",fields: [tutorId], references: [id], onDelete:Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([learnerId, courseId]) // Ensure a user cannot enroll in the same course multiple times
}

model Module {
  id           Int     @id @default(autoincrement())
  courseId    Int @map("course_id")
  title        String  @db.VarChar(255)
  contentType  ContentType
  order        Int
  course       Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Progress[]
  videoContent VideoContent?
  pdfContent   PDFContent?
  webLink  Weblink?
}

model VideoContent {
  id       String    @id @default(uuid())
  moduleId Int  @map("module_id") @unique
  url      String @db.VarChar(255)
  duration Int ?
  module   Module @relation(fields: [moduleId], references: [id], onDelete:  Cascade)

}

model PDFContent {
  id         String    @id @default(uuid())
  moduleId          Int  @map("module_id") @unique
  filePath  String @db.VarChar(255) @map("file_path")
  originalName String @db.VarChar(255) @map("original_name")
  pageCount Int? @map("page_count")
  module     Module @relation(fields: [moduleId], references: [id], onDelete:  Cascade)
}

model Weblink {
  id      String    @id @default(uuid())
  moduleId          Int  @map("module_id") @unique
  url String
  module  Module @relation(fields: [moduleId], references: [id], onDelete:  Cascade)
}

model Message {
  id           Int           @id @default(autoincrement())
  senderId    Int @map("sender_id")
  receiverId  Int @map("receiver_id")
  content      String
  timestamp    DateTime      @default(now())
  status       MessageStatus
  sender       User          @relation("MessageSender", fields: [senderId], references: [id])
  receiver     User          @relation("MessageReceiver", fields: [receiverId], references: [id])
}

model Notification {
  id         Int                @id @default(autoincrement())
  userId    Int                 @map("user_id")
  content    String
  timestamp  DateTime           @default(now())
  status     NotificationStatus
  type       String             @db.VarChar(50)
  user       User               @relation(fields: [userId], references: [id])
}

model Collaboration {
  id           Int                 @id @default(autoincrement())
  learnerId   Int @map("learner_id")
  tutorId     Int @map("tutor_id")
  createdAt   DateTime            @default(now()) @map("created_at")
  status       CollaborationStatus
  learner      User                @relation("LearnerCollaboration", fields: [learnerId], references: [id], onDelete: Cascade )
  tutor        User                @relation("TutorCollaboration", fields: [tutorId], references: [id],  onDelete: Cascade)
}

model Progress {
  id                 Int              @id @default(autoincrement())
  userId            Int  @map("user_id")
  courseId          Int  @map("course_id")
  moduleId          Int  @map("module_id")
  completionStatus  CompletionStatus  @map("completion_status")
  lastAccessedAt   DateTime  @map("last_accessed_at")
  user               User             @relation(fields: [userId], references: [id])
  course             Course           @relation(fields: [courseId], references: [id])
  module             Module           @relation(fields: [moduleId], references: [id])
}
