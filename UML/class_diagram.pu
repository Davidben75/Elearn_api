@startuml "Architectural Layer Diagram"
!theme carbon-gray

' --- Controllers ---
class UserController {
  +addNewLearner(learnerDto: RegisterLearnerDto, tutorId: number): User
  +updateUser(userDto?: UserWithRoleDto): void
  +deleteUser(userId: number): void
  +getUser(): User
  +getAllUserByTutorId(tutorId : number): User[]
  +getAllUsers(paginationDto : PaginationDto): User[]
}

class CollaborationController {
  +updateCollaboration(collab :CollaborationDto): void
  +deleteCollaboration(collabId: number): void
}

class CourseController {
  +createCourse(CourseDto: CourseDto): Course
  +updateCourse(courseId: ObjectId, updateCourseDto: CourseDto): void
  +deleteCourse(courseId: ObjectId): void
  +getCourseById(courseId: ObjectId): Course
  +getAllCourses(paginationDto : PaginationDto): Course[]
  +getAllCoursesByTutorId(tutorId : number): CourseDto[]
  +getProgress(userId: number, courseId: ObjectId): Progress
  +updateProgress(progressDto: UpdateProgressDto): void
}

class MessageController {
  +sendMessage(sendMessageDto: SendMessageDto): void
  +getReceivedMessages(userId: number): Message[]
  +getSentMessages(userId: number): Message[]
}

class AuthController {
  +register(registerDto: RegisterDto): User
  +login(loginDto: LoginDto): string
}

' --- Services ---
class UserService {
  +addNewLearner(learnerDto: RegisterLearnerDto, tutorId: number): User
  +addManyLearner(learnerDto: RegisterLearnerDto[], tutorId: number): User[]
  +addNewTutor(tutorDto: RegisterLearnerDto): User
  +updateUser(userId: number, userDto?: UserWithRoleDto): void
  +deleteUser(userId: number): void
  +getUserById(userId : number): User
  +isValidUser(user : User) : boolean 
  +getAllUserByTutorId(tutorId: number): User[]
  +getAllUsers(): User[]
}

class CollaborationService {
  +addCollaboration(learnerId: number, tutorId: number): void
  +updateCollaboration(collab :CollaborationDto): void
  +deleteCollaboration(collabId: number): void
  +isCollaborationExists(learnerId: number, tutorId: number): boolean
}

class CourseService {
  +createCourse(CourseDto: CourseDto): Course
  +updateCourse(courseId: ObjectId, CourseDto: CourseDto): void
  +deleteCourse(courseId: ObjectId): void
  +getCourseById(courseId: ObjectId): CourseDto
  +getAllCourses(): CourseDto[]
  +getAllCoursesByTutorId(tutorId: number): CourseDto[]
  +getProgress(userId: number, courseId: ObjectId): Progress
  +updateProgress(progressDto: UpdateProgressDto): void
}

class MessageService {
  +sendMessage(sendMessageDto: SendMessageDto): void
  +getReceivedMessages(userId: number): Message[]
  +getSentMessages(userId: number): Message[]
}

class AuthService {
  +registerUser(registerDto: RegisterDto): User
  +validateUser(user: User): User
  +login(loginDto: LoginDto): string
  +generateToken(user: User): string
}

class MailService {
  +sendMailNewCourse(courseDto: CourseDto, users: User[]): void
  +sendMailCourseUpdate(courseDto: CourseDto, users: User[]): void
  +sendMailWelcomeWithCredentials(leanerCredentialsMail: LearnerCredentialMailDto): void
  +sendWelcomeMail(dto : RegisterDto) : void
}

' --- Entities ---

class Collaboration {
  +id: number
  +collaborator_id: string
  +tutor_id :string
  +status: string
}
class User {
  +id: number
  +name: string
  +lastName : string
  +email: string
  +password: string
  +role_id: UserRole
  +status: string
}


class Message {
  +id: number
  +sender: User
  +receiver: User
  +content: string
  +timestamp: Date
  +status: string
}

class Course {
  +_id : ObjectId
  +title: string
  +description: string
  +tutor_id : number
  +status: string
  +modules: Module[]
  +created_at: Date
  +updated_at: Date
}

class Module {
  +_id : ObjectId
  +content_type: string
  +content_value: string
}

enum UserRole {
  TUTOR = 1,
  LEARNER = 2
}

' --- Relationships ---
UserController --> UserService : uses
CollaborationController --> CollaborationService : uses
UserService --> CollaborationService : uses
CourseController --> CourseService : uses
MessageController --> MessageService : uses
AuthController --> AuthService : uses

UserService --> MailService : uses for user creation & course notifications
CourseService --> MailService : uses for course notifications
AuthService --> MailService : uses for registration notifications

User "1" -- "1.*" Collaboration : collaboratesWith
User "1" -- "*" Course : enrolledIn if role_id = 2
Course "0..*" -- "1" Module
User "1" -- "*" Course : teaches if role_id = 1
User "1" -- "*" Message : sends
User "1" -- "*" Message : receives

@enduml